(() => {
  // src/utils.ts
  var IS_WORKER = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;

  // src/logger.ts
  var log = true ? IS_WORKER ? (...args) => console.log("[AMLL-Worker]", ...args) : console.log : noop;

  // src/startup_script.ts
  var hookCall = channel.call;
  channel.call = function AppleMusicLikeLyricCallHook(cmd, ...args) {
    if (cmd === "storage.downloadscanner") {
      log(cmd, ...args, new Error().stack);
    } else {
      return hookCall.apply(hookCall, [cmd, ...args]);
    }
  };
})();
//# sourceMappingURL=data:application/json;base64,
